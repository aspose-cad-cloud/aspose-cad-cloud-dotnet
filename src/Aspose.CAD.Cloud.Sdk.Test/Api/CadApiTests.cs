// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="CadApiTests.cs">
//   Copyright (c) 2018 Aspose.CAD for Cloud
// </copyright>
// <summary>
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Aspose.CAD.Cloud.Sdk.Test.Api
{
	using System;
	using System.IO;
	using System.Collections.Generic;
	using System.Net;
	using NUnit.Framework;

	using Com.Aspose.Storage.Model;

	using Aspose.CAD.Cloud.Sdk.Model;
	using Aspose.CAD.Cloud.Sdk.Model.Requests;
	
    /// <summary>
    ///  Class for testing CadApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CadApiTests : ApiTester
    {
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
			// you can pass your own parameters here
            this.CreateApiInstances();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test GetChangeImageScale
        /// </summary>
        [Test]
        public void GetChangeImageScaleTest()
        {
			// TODO uncomment below to test GetChangeImageScale
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            string name = null;
            string format = null;
            int? newWidth = null;
            int? newHeight = null;
            string folder = null;
            string storage = null;
            string outPath = null;
			var request = new GetChangeImageScaleRequest(name, format, newWidth, newHeight, folder, storage, outPath);
			
			var response = CADApi.GetChangeImageScale(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test GetImageProperties
        /// </summary>
        [Test]
        public void GetImagePropertiesTest()
        {
			// TODO uncomment below to test GetImageProperties
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            string name = null;
            string folder = null;
            string storage = null;
			var request = new GetImagePropertiesRequest(name, folder, storage);
			
			var response = CADApi.GetImageProperties(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test GetImageRotateFlip
        /// </summary>
        [Test]
        public void GetImageRotateFlipTest()
        {
			// TODO uncomment below to test GetImageRotateFlip
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            string name = null;
            string format = null;
            string method = null;
            string folder = null;
            string storage = null;
            string outPath = null;
			var request = new GetImageRotateFlipRequest(name, format, method, folder, storage, outPath);
			
			var response = CADApi.GetImageRotateFlip(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test GetImageSaveAs
        /// </summary>
        [Test]
        public void GetImageSaveAsTest()
        {
			// TODO uncomment below to test GetImageSaveAs
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            string name = null;
            string format = null;
            string folder = null;
            string storage = null;
            string rasterOptions = null;
            string outPath = null;
			var request = new GetImageSaveAsRequest(name, format, folder, storage, rasterOptions, outPath);
			
			var response = CADApi.GetImageSaveAs(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test PostChangeImageScale
        /// </summary>
        [Test]
        public void PostChangeImageScaleTest()
        {
			// TODO uncomment below to test PostChangeImageScale
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            System.IO.Stream document = null;
            string format = null;
            int? newWidth = null;
            int? newHeight = null;
            string storage = null;
            string outPath = null;
			var request = new PostChangeImageScaleRequest(document, format, newWidth, newHeight, storage, outPath);
			
			var response = CADApi.PostChangeImageScale(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test PostImageRotateFlip
        /// </summary>
        [Test]
        public void PostImageRotateFlipTest()
        {
			// TODO uncomment below to test PostImageRotateFlip
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            System.IO.Stream document = null;
            string format = null;
            string method = null;
            string storage = null;
            string outPath = null;
			var request = new PostImageRotateFlipRequest(document, format, method, storage, outPath);
			
			var response = CADApi.PostImageRotateFlip(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
        /// <summary>
        /// Test PostImageSaveAs
        /// </summary>
        [Test]
        public void PostImageSaveAsTest()
        {
			// TODO uncomment below to test PostImageSaveAs
			// you can use storageApi class member to manipulate your Aspose Cloud Storage (like uploading needed files or checking if they exist for tests)
			
			/* 
            System.IO.Stream document = null;
            string format = null;
            string storage = null;
            string rasterOptions = null;
            string outPath = null;
			var request = new PostImageSaveAsRequest(document, format, storage, rasterOptions, outPath);
			
			var response = CADApi.PostImageSaveAs(request);
			
			bool resultShouldHaveBinaryData = false;
			if (response is SaaSposeResponse)
			{
				//Assert.AreEqual(response.Code, (int)HttpStatusCode.OK);
			}
			else if (!resultShouldHaveBinaryData)
			{
				//SaaSposeResponse CADResponse = (SaaSposeResponse)SerializationHelper.Deserialize<SaaSposeResponse>(StreamHelper.ToString(response));
				//Assert.AreEqual(CADResponse.Code, HttpStatusCode.OK);
			}
			else if (response is System.IO.Stream)
			{
				// process raw data
			}
			*/
        }
		
    }
}
